/*
 * @Author: Renjie Meng
 * @Student ID: 877396
 * */

package DictionaryClient;


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

/**
 * This class is responsible for client side GUI.
 */
public class ClientGUI extends JFrame {
    private JPanel mainPanel;
    private JTextField clientInputTextFiled;
    private JButton addButton;
    private JButton searchButton;
    private JButton deleteButton;

    private JTextArea clientOutputTextArea;

    private JLabel statusConnectivityLabel;
    private JTextArea serverResponse;
    private JButton disconnectButton;

    public JLabel getConnectivity() {
        return connectivity;
    }

    private JLabel connectivity;

    String patternString = "[A-Za-z0-9 _.,!\"'/$]*";
    Pattern pattern = Pattern.compile(patternString);


    public ClientGUI(String appName) {
        super(appName);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(mainPanel);
        this.pack();
        this.setLocationRelativeTo(null);


        setAddButtonLogic();
        setDeleteButtonLogic();
        setSearchButtonLogic();
        setDisconnectButtonLogic();
    }

    /**
     * Set the add button logic
     */
    public void setAddButtonLogic() {
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // the input message should not contain the preserved keyword SEPARATOR
                String word = clientInputTextFiled.getText();
                String meaning = clientOutputTextArea.getText();
                Matcher wordMatcher = pattern.matcher(word);
                Matcher meaningMatcher = pattern.matcher(meaning);
                if (!meaningMatcher.matches() || !wordMatcher.matches()) {
                    serverResponse.setForeground(new Color(255, 0, 0));
                    serverResponse.setText("The input is not valid, contains invalid chars. The valid pattern is \"[A-Za-z0-9 _.,!\\\"'/$]*\"");

                } else {
                    ClientController.getClientController().add(word, meaning);
                }
            }
        });
    }

    /**
     * Set the disconnect button logic
     */
    public void setDisconnectButtonLogic() {
        disconnectButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ClientController.getClientController().disconnect();
            }
        });
    }

    /**
     * Set the delete button logic
     */
    public void setDeleteButtonLogic() {
        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String word = clientInputTextFiled.getText();
                Matcher wordMatcher = pattern.matcher(word);
                if (!wordMatcher.matches()) {
                    serverResponse.setForeground(new Color(255, 0, 0));
                    serverResponse.setText("The input is not valid, contains invalid chars. The valid pattern is \"[A-Za-z0-9 _.,!\\\"'/$]*\"");

                } else {
                    ClientController.getClientController().delete(word);
                }
            }
        });
    }

    /**
     * Set the search button logic
     */
    public void setSearchButtonLogic() {
        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String word = clientInputTextFiled.getText();
                Matcher wordMatcher = pattern.matcher(word);
                if (!wordMatcher.matches()) {
                    serverResponse.setForeground(new Color(255, 0, 0));
                    serverResponse.setText("The input is not valid, contains invalid chars. The valid pattern is \"[A-Za-z0-9 _.,!\\\"'/$]*\"");

                } else {
                    ClientController.getClientController().search(word);
                }
            }
        });
    }


    public JTextArea getClientOutputTextArea() {
        return clientOutputTextArea;
    }


    public JTextArea getServerResponse() {
        return serverResponse;
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(16, 18, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.setAutoscrolls(false);
        mainPanel.setPreferredSize(new Dimension(492, 458));
        mainPanel.setBorder(BorderFactory.createTitledBorder(""));
        clientInputTextFiled = new JTextField();
        clientInputTextFiled.setMargin(new Insets(2, 6, 2, 6));
        mainPanel.add(clientInputTextFiled, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 7, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 41), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Word:");
        mainPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, new Dimension(80, 25), new Dimension(80, 25), new Dimension(80, 25), 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Meaning: ");
        mainPanel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 12, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, new Dimension(80, 25), new Dimension(80, 25), new Dimension(80, 25), 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setAutoscrolls(false);
        mainPanel.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(2, 3, 12, 7, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        clientOutputTextArea = new JTextArea();
        clientOutputTextArea.setLineWrap(true);
        clientOutputTextArea.setText("");
        scrollPane1.setViewportView(clientOutputTextArea);
        searchButton = new JButton();
        searchButton.setText("Search");
        mainPanel.add(searchButton, new com.intellij.uiDesigner.core.GridConstraints(0, 10, 1, 8, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteButton = new JButton();
        deleteButton.setText("Delete ");
        mainPanel.add(deleteButton, new com.intellij.uiDesigner.core.GridConstraints(4, 10, 2, 8, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addButton = new JButton();
        addButton.setActionCommand("Add");
        addButton.setText(" Add ");
        mainPanel.add(addButton, new com.intellij.uiDesigner.core.GridConstraints(2, 10, 2, 8, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        statusConnectivityLabel = new JLabel();
        statusConnectivityLabel.setText("System message:");
        mainPanel.add(statusConnectivityLabel, new com.intellij.uiDesigner.core.GridConstraints(14, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, new Dimension(120, 25), new Dimension(120, 25), new Dimension(120, 25), 0, false));
        serverResponse = new JTextArea();
        serverResponse.setAutoscrolls(false);
        serverResponse.setBackground(new Color(-1644826));
        serverResponse.setCaretColor(new Color(-4473925));
        serverResponse.setDisabledTextColor(new Color(-1733928));
        serverResponse.setEditable(false);
        serverResponse.setFocusable(false);
        serverResponse.setForeground(new Color(-15374363));
        serverResponse.setLineWrap(true);
        serverResponse.setMaximumSize(new Dimension(354, 50));
        serverResponse.setMinimumSize(new Dimension(354, 50));
        serverResponse.setPreferredSize(new Dimension(354, 50));
        serverResponse.setText("");
        mainPanel.add(serverResponse, new com.intellij.uiDesigner.core.GridConstraints(14, 3, 1, 8, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, new Dimension(300, 50), new Dimension(300, 50), new Dimension(300, 50), 0, false));
        disconnectButton = new JButton();
        disconnectButton.setText("Disconnect");
        mainPanel.add(disconnectButton, new com.intellij.uiDesigner.core.GridConstraints(13, 10, 1, 8, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        connectivity = new JLabel();
        connectivity.setText("Label");
        mainPanel.add(connectivity, new com.intellij.uiDesigner.core.GridConstraints(15, 1, 1, 10, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Status:");
        mainPanel.add(label3, new com.intellij.uiDesigner.core.GridConstraints(15, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
